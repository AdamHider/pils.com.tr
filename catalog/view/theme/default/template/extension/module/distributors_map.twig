{{ header }}
<div id="information-contact" class="container">
  <ul class="breadcrumb">
    {% for breadcrumb in breadcrumbs %}
    <li><a href="{{ breadcrumb.href }}">{{ breadcrumb.text }}</a></li>
    {% endfor %}
  </ul>
  <div class="row">{{ column_left }}
    {% if column_left and column_right %}
    {% set class = 'col-sm-6' %}
    {% elseif column_left or column_right %}
    {% set class = 'col-sm-9' %}
    {% else %}
    {% set class = 'col-sm-12' %}
    {% endif %}
    <div id="content" class="{{ class }}">{{ content_top }}
      <h1>{{ heading_title }}</h1>
      <div class="distributor-links">
        <a class="distributor-link{% if mode == 'tr' %} active{% endif %}" href="index.php?route=extension/module/distributors_map&m=tr">
          <img src="image/catalog/distributors/distributors_tr.jpg" width="200"/>
          <label>Turkey</label>
        </a>
        <a class="distributor-link{% if mode == 'world' %} active{% endif %}"href="index.php?route=extension/module/distributors_map&m=world">
          <img src="image/catalog/distributors/distributors_world.jpg" width="200"/>
          <label>World</label>
        </a>
      </div>
      <h3>{{ text_location }}</h3>

      <div class="panel panel-default">
        <div class="panel-body">
          <div class="row">
            <div id="map"></div>
            <div id="popper">Ciao</div>
          </div>
        </div>
      </div>
      
      {{ content_bottom }}</div>
    {{ column_right }}</div>
</div>
{{ footer }}

<style>
.panel{
  border: none !important;
  box-shadow: none !important;
}
path {
  cursor: pointer;
}

path:hover {
  fill: #ef7c2f;
}

#popper {
  visibility: hidden;
  padding: 1em;
  background: white;
  border-radius: 2px;
  box-shadow: 0 0 10px 3px rbga(0, 0, 0, .3);
}
.distributor-links{
  text-align: center;
  display: flex;
  justify-content: space-evenly;
  margin: 1.5em 0;
}
.distributor-link{
  border-radius: 5px !important;
  box-shadow: 1px 3px 15px -3px #00000036;
  background-size: cover;
  background-position: bottom;
  transition: 0.5s all;
  position: relative;
  overflow: hidden;
  margin-left: 15px;
  padding: 1em;
  filter: grayscale(1);
}
.distributor-link:hover{
  filter: grayscale(0);
}
.distributor-link.active{
  filter: grayscale(0);
}
.distributor-link:after{
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.distributor-link.active:after{
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.distributor-link label{
  margin-top: 1em;
  width: 100%;
  font-size: 20px;
}
.distributor-link.active label{
  color: #ef7c2f;
}
.distributor-link img{
  border: 2px solid #e6e6e6;
  border-radius: 10px;
}
</style>


<script>
const popperEl = document.getElementById('popper')
let popperInstance
const getHex = (value) => {
  return value.toString(16).padStart(2, '0')
}
const getColor = (ratio) => {
  const color1 = '228b22'
  const color2 = 'ffffff'
  if (!isFinite(ratio)) { return '#' + color1 }
  const r = Math.ceil(parseInt(color1.substring(0, 2), 16) * ratio + parseInt(color2.substring(0, 2), 16) * (1 - ratio))
  const g = Math.ceil(parseInt(color1.substring(2, 4), 16) * ratio + parseInt(color2.substring(2, 4), 16) * (1 - ratio))
  const b = Math.ceil(parseInt(color1.substring(4, 6), 16) * ratio + parseInt(color2.substring(4, 6), 16) * (1 - ratio))
  return '#' + getHex(r) + getHex(g) + getHex(b)
}

// 2019 Belgian population by province
const data = {{ mode }}_config;

fetch('catalog/view/javascript/svg_map/{{ mode }}.svg')
  .then(response => response.text())
  .then((image) => {
    let startOfSvg = image.indexOf('<svg')
    startOfSvg = startOfSvg >= 0 ? startOfSvg : 0

    const draw = SVG(image.slice(startOfSvg))
      .addTo('#map')
      .size('100%', 450)
      .panZoom({
        panning: false,
        pinchZoom: false,
        wheelZoom: false
      })
    
    // get maximum value among the supplied data
    const max = Math.max(...Object.values(data))
    for (const region of draw.find('path')) {
      const regionData = data[region.id()]

      if (isFinite(regionData.description)) {
        // color the region based on it's value with respect to the maximum
        region.fill('#ececec');
        if(regionData.is_distributor){
          region.fill('#353535');
        }
        
        // show region value as a label
        draw.text(regionData.description.toString())
          .font({
            size: '1.25em'
          })
          .center(region.cx(), region.cy())
      }
      
      // show region data when clicking on it
      region.on('click', () => {
        alert(`${regionData.title}: ${regionData.description}`)
      })
      
      region.on('mouseover', () => {
        popperEl.innerText = `${regionData.title}: ${regionData.description}`
        popperEl.style.visibility = 'visible'
        popperInstance = Popper.createPopper(region.node, popperEl, { placement: 'bottom' })
      })
      
      region.on('mouseleave', () => {
        popperEl.style.visibility = 'hidden'
      })
    }
  })

</script>